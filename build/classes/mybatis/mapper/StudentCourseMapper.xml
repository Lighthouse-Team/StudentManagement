<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.dao.StudentCourseMapper">

	<resultMap type="com.project.beans.StudentCourse" id="studentCourseMap">
		<id column="scId" property="scId" />
		<result column="score" property="score" />
		<result column="scLevel" property="scLevel" />
		<result column="scTerm" property="scTerm" />
		<result column="examProperty" property="examProperty" />
		<result column="scoreMark" property="scoreMark" />

		<!-- 级联学生属性 -->
		<association property="scStudent"
			select="com.project.dao.StudentMapper.getStudentByStudentId" column="studentId">
		</association>
		<!-- 级联课程属性 -->
		<association property="scCourse"
			select="com.project.dao.CourseMapper.getCourseByCourseId" column="courseId">
		</association>
	</resultMap>

	<!-- 通过 studentCourse 对象属性查询学生课程信息: public StudentCourse getStudentCourseByEntity(StudentCourse 
		studentCourse); -->
	<select id="getStudentCourseByEntity" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
			<if test="score != 0">
				and sc.score = #{score}
			</if>
			<if test="scLevel != null">
				and sc.scLevel = #{scLevel}
			</if>
			<if test="scTerm != null">
				and sc.scTerm = #{scTerm}
			</if>
			<if test="examProperty != null">
				and sc.examProperty = #{examProperty}
			</if>
			<if test="scoreMark != null">
				and sc.scoreMark = #{scoreMark}
			</if>
			<if test="scStudent != null">
				and sc.studentId = #{scStudent.studentId}
			</if>
			<if test="scCourse != null">
				and sc.courseId = #{scCourse.courseId}
			</if>
		</where>
	</select>

	<!-- 获取所有学生课程信息: public List<StudentCourse> getAllStudentCourse(); -->
	<select id="getAllStudentCourse" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
		</where>
	</select>

	<!-- 通过 studentCourse 属性模糊查询学生课程信息: public List<StudentCourse> getStudentCourseListByEntityForLike(StudentCourse 
		studentCourse); -->
	<select id="getStudentCourseListByEntityForLike" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
			<if test="score != 0">
				and sc.score like CONCAT('%', #{score}, '%')
			</if>
			<if test="scLevel != null">
				and sc.scLevel like CONCAT('%', #{scLevel}, '%')
			</if>
			<if test="scTerm != null">
				and sc.scTerm like CONCAT('%', #{scTerm}, '%')
			</if>
			<if test="examProperty != null">
				and sc.examProperty = #{examProperty}
			</if>
			<if test="scoreMark != null">
				and sc.scoreMark = #{scoreMark}
			</if>
			<if test="scStudent != null">
				and sc.studentId like CONCAT('%', #{scStudent.studentId},
				'%')
			</if>
			<if test="scCourse != null">
				and sc.courseId like CONCAT('%', #{scCourse.courseId},
				'%')
			</if>
		</where>
	</select>

	<!-- 更新学生课程信息: public void updateStudentCourseByEntity(StudentCourse studentCourse); -->
	<update id="updateStudentCourseByEntity">
		update StudentCourse
		<trim prefix="set" suffixOverrides=",">
			<if test="score != 0">
				sc.score = #{score},
			</if>
			<if test="scLevel != null">
				sc.scLevel = #{scLevel},
			</if>
			<if test="scTerm != null">
				sc.scTerm = #{scTerm},
			</if>
			<if test="examProperty != null">
				sc.examProperty = #{examProperty},
			</if>
			<if test="scoreMark != null">
				sc.scoreMark = #{scoreMark},
			</if>
			<if test="scStudent != null">
				sc.studentId = #{scStudent.studentId},
			</if>
			<if test="scCourse != null">
				sc.courseId = #{scCourse.courseId},
			</if>
		</trim>
		<where>
			sc.scId = #{scId}
		</where>
	</update>

	<!-- 添加学生课程信息, 并返回添加后的主键值: public void addStudentCourse(StudentCourse studentCourse); -->
	<insert id="addStudentCourse">
		insert into StudentCourse
		<include refid="studentCourseProperty" />
		values
		(#{score}, #{scLevel}, #{scStudent.studentId},
		#{scCourse.courseId}, #{scTerm}, #{examProperty}, #{scoreMark})
	</insert>

	<!-- 通过 studentCourse 删除指定学生课程信息: public void deleteStudentCourseByEntity(StudentCourse 
		studentCourse); -->
	<delete id="deleteStudentCourseByEntity">
		delete from StudentCourse
		<where>
			<if test="scId = null">
				scId = #{scId}
			</if>
			<if test="scStudent != null">
				studentId = #{scStudent.studentId}
			</if>
			<if test="scCourse != null">
				courseId = #{scCourse.courseId}
			</if>
		</where>
	</delete>




	<!-- ======下面为前端展示需要用到的接口的实现======== -->

	<!-- ======通过 grade 属性获得AC的考试成绩的分布，AC指所有课程，包括：必修课、专业选修课、通识选修课======= -->

	<!-- 通过 grade 获得该年级该学期AC的加权总分: public double getACTotalScoreByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalScoreByGrade" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的总学分: public double getACTotalCreditsByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalCreditsByGrade" resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的所有成绩记录数: public Integer getACTotalSocreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalSocreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的优秀成绩记录数: public Integer getACExcellentScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACExcellentScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的良好成绩记录数: public Integer getACGoodScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACGoodScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的中等成绩记录数: public Integer getACMediumScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACMediumScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的及格成绩记录数: public Integer getACPassScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACPassScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseTerm = #{term}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>


	<!-- =======通过 courseType 属性获得AG该课程的考试成绩分布，AG指所有年级====== -->

	<!-- 通过 courseType 获得AG该学期所有课程的加权总分: public double getAGTotalScoreByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalScoreByCourseType" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from course c,studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and
			c.courseType = #{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期所有课程的总学分: public double getAGTotalCreditsByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalCreditsByCourseType" resultType="java.lang.Double">
		select sum(c.courseCredits) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and
			c.courseType = #{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的所有成绩记录数: public Integer getAGTotalSocreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalSocreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and
			c.courseType = #{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的优秀成绩记录数: public Integer getAGExcellentScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGExcellentScoreRecordNumberByCourseType"
		resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and
			c.courseType = #{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的良好成绩记录数: public Integer getAGGoodScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGGoodScoreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and c.courseType =
			#{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[ and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的中等成绩记录数: public Integer getAGMediumScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGMediumScoreRecordNumberByCourseType"
		resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and c.courseType =
			#{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[ and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的及格成绩记录数: public Integer getAGPassScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGPassScoreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseTerm = #{term}
			and c.courseType =
			#{courseType}
			and sc.scTerm like CONCAT(#{year}, '%')
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[ and sc.score < 70]]>
		</where>
	</select>

	<!-- =======通过 grade 属性获得RPEC的考试成绩的分布，RPEC指必修课和专业选修课======== -->

	<!-- 通过 grade 获得该年级该学期RPEC的加权总分: public double getRPECTotalScoreByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalScoreByGrade" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的总学分: public double getRPECTotalCreditsByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalCreditsByGrade" resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的所有成绩记录数: public Integer getRPECTotalSocreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalSocreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByGrade"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.score >= 90
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的良好成绩记录数: public Integer getRPECGoodScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECGoodScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.score >= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的中等成绩记录数: public Integer getRPECMediumScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECMediumScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.score >= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的及格成绩记录数: public Integer getRPECPassScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECPassScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType =2)
			and c.courseTerm = #{term}
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.score >= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>

	<!-- ======通过 grade和departmentId 获得RPEC的考试成绩的分布，RPEC指必修课和专业选修课======= -->

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的加权总分: public double getRPECTotalScoreByGradeAndDepartmentId(@Param(value 
		= "departmentId") Integer departmentId, @Param(value = "grade") Integer grade, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getRPECTotalScoreByGradeAndDepartmentId" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的总学分: public double getRPECTotalCreditsByGradeAndDepartmentId(@Param(value 
		= "departmentId") Integer departmentId, @Param(value = "grade") Integer grade, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getRPECTotalCreditsByGradeAndDepartmentId"
		resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的所有成绩记录数: public Integer getRPECTotalScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECTotalScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
			and sc.score
			>= 90
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的良好成绩记录数: public Integer getRPECGoodScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECGoodScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
			and sc.score
			>= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的中等成绩记录数: public Integer getRPECMediumScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECMediumScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
			and sc.score
			>= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的及格成绩记录数: public Integer getRPECPassScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECPassScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseTerm = #{term}
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examProperty = 1
			and
			sc.scoreMark = 1
			and
			sc.scTerm like CONCAT(#{year}, '%')
			and sc.score
			>= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>

	<!-- ======通过 classNumber 获得该班级RPEC的优秀率、不及格情况，RPEC指必修课和专业选修课======== -->

	<!-- 通过 grade 获得该年级的所有班级: public List<String> getAllClassNumberByGrade(@Param(value 
		= "grade") Integer grade); -->
	<select id="getAllClassNumberByGrade" resultType="java.lang.String">
		select studentClass from student
		<where>
			studentClass like CONCAT(#{grade}, '%')
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的成绩记录总数: public Integer getRPECTotalScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECTotalScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseTerm = #{term}
			and
			(c.courseType = 1 or c.courseType = 2)
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseTerm = #{term}
			and
			(c.courseType = 1 or c.courseType = 2)
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and
			sc.score >= 90
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的不及格成绩记录数: public Integer getRPECFailScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECFailScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseTerm = #{term}
			and
			(c.courseType = 1 or c.courseType = 2)
			and sc.scTerm like
			CONCAT(#{year}, '%')
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>



	<sql id="studentCourseProperty">
		(score, scLevel, studentId, courseId, scTerm, examProperty,
		scoreMark)
	</sql>

</mapper>