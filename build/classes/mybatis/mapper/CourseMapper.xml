<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.dao.CourseMapper">

	<resultMap type="com.project.beans.Course" id="courseMap">
		<id column="courseId" property="courseId" />
		<result column="courseNumber" property="courseNumber" />
		<result column="courseName" property="courseName" />
		<result column="coursePeriod" property="coursePeriod" />
		<result column="courseCredits" property="courseCredits" />
		<result column="courseDepartment" property="courseDepartment" />
		<result column="courseAttribute" property="courseAttribute" />
		<result column="courseProperty" property="courseProperty" />
	</resultMap>

	<resultMap type="com.project.beans.Course" id="courseStudentMap">
		<id column="courseId" property="courseId" />
		<result column="courseNumber" property="courseNumber" />
		<result column="courseName" property="courseName" />
		<result column="coursePeriod" property="coursePeriod" />
		<result column="courseCredits" property="courseCredits" />
		<result column="courseDepartment" property="courseDepartment" />
		<result column="courseAttribute" property="courseAttribute" />
		<result column="courseProperty" property="courseProperty" />

		<collection property="studentList" ofType="com.project.beans.Student">
			<id column="studentId" property="studentId" />
			<result column="studentNumber" property="studentNumber" />
			<result column="studentName" property="studentName" />
			<result column="studentSex" property="studentSex" />
			<result column="studentIDCard" property="studentIDCard" />
			<result column="studentBirth" property="studentBirth" />
			<result column="enrollment" property="enrollment" />
			<result column="studentClass" property="studentClass" />
		</collection>
	</resultMap>

	<!-- 通过 courseId 获取指定课程信息: public course getCourseByCourseId(Integer courseId); -->
	<select id="getCourseByCourseId" resultMap="courseMap">
		select * from Course c
		<where>
			courseId = #{courseId}
		</where>
	</select>

	<!-- 通过 courseNumber 获取指定课程信息: public Course getCourseByCourseNumber(String 
		CourseNumber); -->
	<select id="getCourseByCourseNumber" resultMap="courseMap">
		select * from Course c
		<where>
			courseNumber = #{courseNumber}
		</where>
	</select>

	<!-- 通过 studengId 获取该学生的选课列表: public List<Course> getCourseListByStudentId(@Param(value 
		= "studentId") Integer studentId, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseListByStudentId" resultMap="courseMap">
		select c.* from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and sc.studentId = #{studentId}
			and
			sc.examProperty = 1
			<if test="year != null and term != null">
				and sc.examTerm = CONCAT(#{year}, '-', #{term})
			</if>
		</where>
	</select>

	<!-- 通过 course 对象属性查询课程信息: public course getcourseByEntity(course course); -->
	<select id="getCourseByEntity" resultMap="courseMap">
		select * from Course c
		<where>
			<if test="courseId != null">
				and courseId = #{courseId}
			</if>
			<if test="courseNumber != null">
				and courseNumber = #{courseNumber}
			</if>
			<if test="courseName != null">
				and courseName = #{courseName}
			</if>
			<if test="coursePeriod != null">
				and coursePeriod = #{coursePeriod}
			</if>
			<if test="courseCredits != 0">
				and courseCredits = #{courseCredits}
			</if>
			<if test="courseDepartment != null">
				and courseDepartment = #{courseDepartment}
			</if>
			<if test="courseAttribute != null">
				and courseAttribute = #{courseAttribute}
			</if>
			<if test="courseProperty != null">
				and courseProperty = #{courseProperty}
			</if>
		</where>
	</select>

	<!-- 获取所有课程信息: public List<course> getAllcourse(); -->
	<select id="getAllcourse" resultMap="courseMap">
		select * from Course c
	</select>

	<!-- 通过 course 属性模糊查询课程信息列表: public List<course> getCourseListByEntityForLike(course 
		course); -->
	<select id="getCourseListByEntityForLike" resultMap="courseMap">
		select * from Course c
		<where>
			<if test="courseId != null">
				courseId = #{courseId}
			</if>
			<if test="courseNumber != null">
				and courseNumber like CONCAT('%', #{courseNumber}, '%')
			</if>
			<if test="courseName != null">
				and courseName like CONCAT('%', #{courseName}, '%')
			</if>
			<if test="coursePeriod != null">
				and coursePeriod like CONCAT('%', #{coursePeriod}, '%')
			</if>
			<if test="courseCredits != 0">
				and courseCredits like CONCAT('%', #{courseCredits}, '%')
			</if>
			<if test="courseDepartment != null">
				and courseDepartment like CONCAT('%',
				#{courseDepartment}, '%')
			</if>
			<if test="courseAttribute != null">
				and courseAttribute like CONCAT('%', #{courseAttribute},
				'%')
			</if>
			<if test="courseProperty != null">
				and courseProperty like CONCAT('%', #{courseProperty},
				'%')
			</if>
		</where>
	</select>

	<!-- 根据课程属性查询学生选课情况: public List<Course> public List<Course> getCourseDetailsByEntityForLike(@Param(value 
		= "course") Course course, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseDetailsByEntityForLike" resultMap="courseStudentMap">
		select s.*, c.*
		from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			sc.examProperty = 1
			<if test="course.courseId != null">
				and c.courseId = #{course.courseId}
			</if>
			<if test="course.courseName != null">
				and c.courseNumber like CONCAT('%', #{course.courseName},
				'%')
			</if>
			<if test="course.coursePeriod != null">
				and c.coursePeriod like CONCAT('%',
				#{course.coursePeriod}, '%')
			</if>
			<if test="course.courseCredits != 0">
				and c.courseCredits like CONCAT('%',
				#{course.courseCredits}, '%')
			</if>
			<if test="course.courseDepartment != null">
				and c.courseDepartment like CONCAT('%',
				#{course.courseDepartment}, '%')
			</if>
			<if test="course.courseAttribute != null">
				and c.courseAttribute like CONCAT('%',
				#{course.courseAttribute}, '%')
			</if>
			<if test="course.courseProperty != null">
				and c.courseProperty like CONCAT('%',
				#{course.courseProperty}, '%')
			</if>
			<if test="year != null and term != null">
				and sc.examTerm = CONCAT(#{year}, '-', #{term})
			</if>
		</where>
	</select>

	<!-- 更新课程信息: public void updateCourseByEntity(course course); -->
	<update id="updateCourseByEntity">
		update Course
		<trim prefix="set" suffixOverrides=",">
			<if test="courseNumber != null">
				courseNumber = #{courseNumber},
			</if>
			<if test="courseName != null">
				courseName = #{courseName},
			</if>
			<if test="coursePeriod != null">
				coursePeriod = #{coursePeriod},
			</if>
			<if test="courseCredits != 0">
				courseCredits = #{courseCredits},
			</if>
			<if test="courseDepartment != null">
				courseDepartment = #{courseDepartment},
			</if>
			<if test="courseAttribute != null">
				courseAttribute = #{courseAttribute},
			</if>
			<if test="courseProperty != null">
				courseProperty = #{courseProperty},
			</if>
		</trim>
		where courseId = #{courseId}
	</update>

	<!-- 添加课程信息, 并返回添加后的主键值: public void addCourse(course course); -->
	<insert id="addCourse">
		insert into Course
		<include refid="courseProperty" />
		values
		(#{courseNumber}, #{courseName}, #{coursePeriod},
		#{courseCredits}, #{courseDepartment}, #{courseAttribute},
		#{courseProperty})
	</insert>

	<!-- 通过 courseId 删除指定课程信息: public void deletecourseByCourseId(Integer courseId); -->
	<delete id="deleteCourseByCourseId">
		delete from course where courseId = #{courseId}
	</delete>

	<!-- 判断数据库中是否有该课程: public Integer hasCourse(String courseNumber); -->
	<select id="hasCourse" resultType="java.lang.Integer">
		select count(*) from course
		<where>
			courseNumber = #{courseNumber}
		</where>
	</select>

	<!-- 在这里设置课程的 courseType -->
	<!-- 设置必修课的 courseType = 1: public void setCourseTypeOfRequierdCourse(); -->
	<update id="setCourseTypeOfRequierdCourse">
		update course
		<trim prefix="set" suffixOverrides=",">
			courseType = 1,
		</trim>
		<where>
			courseAttribute = '必修'
		</where>
	</update>

	<!-- 设置专业选修课的 courseType = 2: public void setCourseTypeOfProfessionalElectiveCourse(); -->
	<update id="setCourseTypeOfProfessionalElectiveCourse">
		update course
		<trim prefix="set" suffixOverrides=",">
			courseType = 2,
		</trim>
		<where>
			courseAttribute != '必修'
			and (courseProperty = '专业选修课' or
			courseProperty = '专业选修课程')
		</where>
	</update>

	<!-- 设置通识选修课的 courseType = 3: public void setCourseTypeOfGeneralElectiveCourse(); -->
	<update id="setCourseTypeOfGeneralElectiveCourse">
		update course
		<trim prefix="set" suffixOverrides=",">
			courseType = 3,
		</trim>
		<where>
			courseAttribute != '必修'
			and courseProperty != '专业选修课'
			and
			courseProperty != '专业选修课程'
		</where>
	</update>

	<sql id="courseProperty">
		(courseNumber, courseName, coursePeriod, courseCredits,
		courseDepartment, courseAttribute, courseProperty)
	</sql>

</mapper>