<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.dao.StudentCourseMapper">

	<resultMap type="com.project.beans.StudentCourse" id="studentCourseMap">
		<id column="scId" property="scId" />
		<result column="score" property="score" />
		<result column="scLevel" property="scLevel" />
		<result column="examTerm" property="examTerm" />
		<result column="examProperty" property="examProperty" />
		<result column="scoreMark" property="scoreMark" />

		<!-- 级联学生属性 -->
		<association property="scStudent"
			select="com.project.dao.StudentMapper.getStudentByStudentId" column="studentId">
		</association>
		<!-- 级联课程属性 -->
		<association property="scCourse"
			select="com.project.dao.CourseMapper.getCourseByCourseId" column="courseId">
		</association>
	</resultMap>

	<!-- 通过 studentCourse 对象属性查询学生课程信息: public StudentCourse getStudentCourseByEntity(StudentCourse 
		studentCourse); -->
	<select id="getStudentCourseByEntity" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
			<if test="score != 0">
				and sc.score = #{score}
			</if>
			<if test="scLevel != null">
				and sc.scLevel = #{scLevel}
			</if>
			<if test="examTerm != null">
				and sc.examTerm = #{examTerm}
			</if>
			<if test="examProperty != null">
				and sc.examProperty = #{examProperty}
			</if>
			<if test="scoreMark != null">
				and sc.scoreMark = #{scoreMark}
			</if>
			<if test="scStudent != null">
				and sc.studentId = #{scStudent.studentId}
			</if>
			<if test="scCourse != null">
				and sc.courseId = #{scCourse.courseId}
			</if>
		</where>
	</select>

	<!-- 获取所有学生课程信息: public List<StudentCourse> getAllStudentCourse(); -->
	<select id="getAllStudentCourse" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
		</where>
	</select>

	<!-- 通过 studentCourse 属性模糊查询学生课程信息: public List<StudentCourse> getStudentCourseListByEntityForLike(StudentCourse 
		studentCourse); -->
	<select id="getStudentCourseListByEntityForLike" resultMap="studentCourseMap">
		select * from Student s, Course c, StudentCourse sc
		<where>
			s.studentId = sc.studentId and c.courseId = sc.courseId
			<if test="score != 0">
				and sc.score like CONCAT('%', #{score}, '%')
			</if>
			<if test="scLevel != null">
				and sc.scLevel like CONCAT('%', #{scLevel}, '%')
			</if>
			<if test="examTerm != null">
				and sc.examTerm like CONCAT('%', #{examTerm}, '%')
			</if>
			<if test="examProperty != null">
				and sc.examProperty = #{examProperty}
			</if>
			<if test="scoreMark != null">
				and sc.scoreMark = #{scoreMark}
			</if>
			<if test="scStudent != null">
				and sc.studentId like CONCAT('%', #{scStudent.studentId},
				'%')
			</if>
			<if test="scCourse != null">
				and sc.courseId like CONCAT('%', #{scCourse.courseId},
				'%')
			</if>
		</where>
	</select>

	<!-- 更新学生课程信息: public void updateStudentCourseByEntity(StudentCourse studentCourse); -->
	<update id="updateStudentCourseByEntity">
		update StudentCourse
		<trim prefix="set" suffixOverrides=",">
			<if test="score != 0">
				sc.score = #{score},
			</if>
			<if test="scLevel != null">
				sc.scLevel = #{scLevel},
			</if>
			<if test="examTerm != null">
				sc.examTerm = #{examTerm},
			</if>
			<if test="examProperty != null">
				sc.examProperty = #{examProperty},
			</if>
			<if test="scoreMark != null">
				sc.scoreMark = #{scoreMark},
			</if>
			<if test="scStudent != null">
				sc.studentId = #{scStudent.studentId},
			</if>
			<if test="scCourse != null">
				sc.courseId = #{scCourse.courseId},
			</if>
		</trim>
		<where>
			sc.scId = #{scId}
		</where>
	</update>

	<!-- 添加学生课程信息, 并返回添加后的主键值: public void addStudentCourse(StudentCourse studentCourse); -->
	<insert id="addStudentCourse">
		insert into StudentCourse
		<include refid="studentCourseProperty" />
		values
		(#{score}, #{scLevel}, #{scStudent.studentId},
		#{scCourse.courseId}, #{examTerm}, #{examProperty}, #{scoreMark})
	</insert>

	<!-- 通过 studentCourse 删除指定学生课程信息: public void deleteStudentCourseByEntity(StudentCourse 
		studentCourse); -->
	<delete id="deleteStudentCourseByEntity">
		delete from StudentCourse
		<where>
			<if test="scId = null">
				scId = #{scId}
			</if>
			<if test="scStudent != null">
				studentId = #{scStudent.studentId}
			</if>
			<if test="scCourse != null">
				courseId = #{scCourse.courseId}
			</if>
		</where>
	</delete>

	<!-- =========================下面为前端展示需要用到的接口的实现========================= -->

	<!-- ======通过 grade 属性获得AC的考试成绩的分布，AC指所有课程，包括：必修课、专业选修课、通识选修课======= -->

	<!-- 通过 grade 获得该年级该学期AC的加权总分: public double getACTotalScoreByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalScoreByGrade" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark
			= 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的总学分: public double getACTotalCreditsByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalCreditsByGrade" resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark
			= 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的所有成绩记录数: public Integer getACTotalSocreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACTotalScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and s.studentClass like
			CONCAT(#{grade}, '%')
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的优秀成绩记录数: public Integer getACExcellentScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACExcellentScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and s.studentClass like
			CONCAT(#{grade}, '%')
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的良好成绩记录数: public Integer getACGoodScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACGoodScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and s.studentClass like CONCAT(#{grade},
			'%')
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的中等成绩记录数: public Integer getACMediumScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACMediumScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and s.studentClass like CONCAT(#{grade},
			'%')
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期AC的及格成绩记录数: public Integer getACPassScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getACPassScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and s.studentClass like CONCAT(#{grade},
			'%')
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>


	<!-- =======通过 courseType 属性获得AG该课程的考试成绩分布，AG指所有年级====== -->

	<!-- 通过 courseType 获得AG该学期所有课程的加权总分: public double getAGTotalScoreByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalScoreByCourseType" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from course c,studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期所有课程的总学分: public double getAGTotalCreditsByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalCreditsByCourseType" resultType="java.lang.Double">
		select sum(c.courseCredits) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的所有成绩记录数: public Integer getAGTotalSocreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGTotalSocreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的优秀成绩记录数: public Integer getAGExcellentScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGExcellentScoreRecordNumberByCourseType"
		resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的良好成绩记录数: public Integer getAGGoodScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGGoodScoreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[ and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的中等成绩记录数: public Integer getAGMediumScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGMediumScoreRecordNumberByCourseType"
		resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[ and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 CourseType 获得AG该学期的及格成绩记录数: public Integer getAGPassScoreRecordNumberByCourseType(@Param(value 
		= "courseType") Integer courseType, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getAGPassScoreRecordNumberByCourseType" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseType = #{courseType}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[ and sc.score < 70]]>
		</where>
	</select>

	<!-- =======通过 grade 属性获得RPEC的考试成绩的分布，RPEC指必修课和专业选修课======== -->

	<!-- 通过 grade 获得该年级该学期RPEC的加权总分: public double getRPECTotalScoreByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalScoreByGrade" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的总学分: public double getRPECTotalCreditsByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalCreditsByGrade" resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的所有成绩记录数: public Integer getRPECTotalSocreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECTotalSocreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByGrade"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的良好成绩记录数: public Integer getRPECGoodScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECGoodScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的中等成绩记录数: public Integer getRPECMediumScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECMediumScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade 获得该年级该学期RPEC的及格成绩记录数: public Integer getRPECPassScoreRecordNumberByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRPECPassScoreRecordNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and (c.courseType = 1 or
			c.courseType = 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>

	<!-- ======通过 grade和departmentId 获得RPEC的考试成绩的分布，RPEC指必修课和专业选修课======= -->

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的加权总分: public double getRPECTotalScoreByGradeAndDepartmentId(@Param(value 
		= "departmentId") Integer departmentId, @Param(value = "grade") Integer grade, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getRPECTotalScoreByGradeAndDepartmentId" resultType="java.lang.Double">
		select sum(sc.score * c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的总学分: public double getRPECTotalCreditsByGradeAndDepartmentId(@Param(value 
		= "departmentId") Integer departmentId, @Param(value = "grade") Integer grade, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getRPECTotalCreditsByGradeAndDepartmentId"
		resultType="java.lang.Double">
		select sum(c.courseCredits) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的所有成绩记录数: public Integer getRPECTotalScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECTotalScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的良好成绩记录数: public Integer getRPECGoodScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECGoodScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 80
			<![CDATA[and sc.score < 90]]>
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的中等成绩记录数: public Integer getRPECMediumScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECMediumScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 70
			<![CDATA[and sc.score < 80]]>
		</where>
	</select>

	<!-- 通过 grade和departmentId 获得该学院该年级该学期RPEC的及格成绩记录数: public Integer getRPECPassScoreRecordNumberByGradeAndDepartmentId( 
		@Param(value = "departmentId") Integer departmentId, @Param(value = "grade") 
		Integer grade, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getRPECPassScoreRecordNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c,
		studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and (c.courseType = 1 or c.courseType = 2)
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 60
			<![CDATA[and sc.score < 70]]>
		</where>
	</select>

	<!-- ======通过 classNumber 获得该班级RPEC的优秀率、不及格情况，RPEC指必修课和专业选修课======== -->

	<!-- 通过 grade 获得该年级的所有班级: public List<String> getClassNumberListByGrade(@Param(value 
		= "grade") Integer grade); -->
	<select id="getClassNumberListByGrade" resultType="java.lang.String">
		select studentClass from student
		<where>
			studentClass like CONCAT(#{grade}, '%')
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的成绩记录总数: public Integer getRPECTotalScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECTotalScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and (c.courseType = 1 or c.courseType
			= 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的优秀成绩记录数: public Integer getRPECExcellentScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECExcellentScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and (c.courseType = 1 or c.courseType
			= 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级RPEC的不及格成绩记录数: public Integer getRPECFailScoreRecordNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRPECFailScoreRecordNumberByClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and (c.courseType = 1 or c.courseType
			= 2)
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- ======获得所有专业所有年级的平均成绩和差值====== 这里没有定义新的接口，使用之前定义的接口可以实现预期功能 -->

	<!-- ======获得全校各年级本科生RC的不及格整体情况，RC指必修课====== -->

	<!-- 通过 grade 获得该年级的学生总数: public Integer getTotalStudentNumberByGrade(@Param(value 
		= "grade") Integer grade); -->
	<select id="getTotalStudentNumberByGrade" resultType="java.lang.Integer">
		select count(*) from student
		<where>
			studentClass like CONCAT(#{grade}, '%')
		</where>
	</select>

	<!-- 通过 grade 获得RC不及格学生的studentId列表: public List<Integer> getRCFailStudentIdListByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRCFailStudentIdListByGrade" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseType = 1
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- ======获得各院系本科生RC不及格学生整体情况，RC指必修课====== -->

	<!-- 通过 grade和departmentId 获得该院系的学生总数: public Integer getTotalStudentNumberByGradeAndDepartmentId(@Param(value 
		= "grade") Integer grade, @Param(value = "departmentId") Integer departmentId); -->
	<select id="getTotalStudentNumberByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student
		<where>
			studentClass like CONCAT(#{grade}, '%')
			and departmentId =
			#{departmentId}
		</where>
	</select>

	<!-- 通过 departmentId 获得RC不及格学生的studentId列表: public List<Integer> getRCFailStudentIdListByDepartmentId(@Param(value 
		= "departmentId") Integer departmentId, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRCFailStudentIdListByDepartmentId" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.departmentId = #{departmentId}
			and c.courseType = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark
			= 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- 上个功能测试用 -->

	<!-- 通过 grade和departmentId 获得该年级该学院的studentId列表: public List<Integer> getStudentIdListByGradeAndDepartmentId(@Param(value 
		= "grade") Integer grade, @Param(value = "departmentId") Integer departmentId); -->
	<select id="getStudentIdListByGradeAndDepartmentId" resultType="java.lang.Integer">
		select studentId from student
		<where>
			studentClass like CONCAT(#{grade}, '%')
			and departmentId =
			#{departmentId}
		</where>
	</select>

	<!-- 通过 studentId 获得该学生RC的不及格课程数目: public Integer getRCFailCourseNumberByStudentId(@Param(value 
		= "studentId") Integer studentId, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRCFailCourseNumberByStudentId" resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and s.studentId
			= #{studentId}
			and c.courseType = 1
			and sc.examTerm = CONCAT(#{year},
			'-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- ======获得各院系分年级本科生RC的不及格情况，RC指必修课程====== -->

	<!-- 通过 grade和departmentId 获得该年级该学院RC不及格的studentId列表: public List<Integer> 
		getRCFailStudentIdListByGradeAndDepartmentId(@Param(value = "grade") Integer 
		grade, @Param(value = "departmentId") Integer departmentId, @Param(value 
		= "year") String year, @Param(value = "term") Integer term); -->
	<select id="getRCFailStudentIdListByGradeAndDepartmentId"
		resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and s.departmentId =
			#{departmentId}
			and c.courseType = 1
			and sc.examTerm = CONCAT(#{year},
			'-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- ======获得各班级不及格情况====== -->

	<!-- 通过 classNumber 获得该班级RC的不及格学生的studentId列表: public List<Integer> getRCFailStudentIdListByClassNumber(@Param(value 
		= "classNumber") String classNumber, @Param(value = "year") String year, 
		@Param(value = "term") Integer term); -->
	<select id="getRCFailStudentIdListByClassNumber" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseType = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark
			= 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- 通过 classNumber 获得该班级的学生总数: public Integer getTotalStudentNumberByClassNumber(@Param(value 
		= "classNumber") String classNumber); -->
	<select id="getTotalStudentNumberByClassNumber" resultType="java.lang.Integer">
		select count(*) from student
		<where>
			studentClass = #{classNumber}
		</where>
	</select>

	<!-- ======获得各年级各类课程的缺考情况====== -->

	<!-- 通过 grade 获得该年级缺考RC的studentId列表: public List<Integer> getRCAbsenceStudentIdListByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getRCAbsenceStudentIdListByGrade" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseType = 1
			and
			sc.examProperty = 1
			and sc.scoreMark = 2
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- 通过 grade 获得该年级缺考PEC的studentId列表: public List<Integer> getPECAbsenceStudentIdListByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getPECAbsenceStudentIdListByGrade" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseType = 2
			and
			sc.examProperty = 1
			and sc.scoreMark = 2
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- 通过 grade 获得该年级缺考GEC的studentId列表: public List<Integer> getGECAbsenceStudentIdListByGrade(@Param(value 
		= "grade") Integer grade, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getGECAbsenceStudentIdListByGrade" resultType="java.lang.Integer">
		select s.studentId from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass like CONCAT(#{grade}, '%')
			and c.courseType = 3
			and
			sc.examProperty = 1
			and sc.scoreMark = 2
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- ======大一、大二、大三具有代表性的14门主要基础课程成绩基本情况====== -->

	<!-- 通过 courseName 获得该课程在指定学年的上课班级列表: public List<String> getCourseClassNumberListBycourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseClassNumberListBycourseName" resultType="java.lang.String">
		select s.studentClass from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			c.courseName = #{courseName}
			and sc.examProperty = 1
			and sc.scoreMark =
			1
			and sc.examTerm = CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- 通过 courseName 获得该课程的参加考试总人数: public Integer getCourseTotalStudentNumberByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseTotalStudentNumberByCourseName" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- 通过 courseName 获得该课程得优秀的学生人数: public Integer getCourseExcellentNumberByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseExcellentNumberByCourseName" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 courseName 获得该课程得不及格的学生人数: public Integer getCourseFailNumberByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseFailNumberByCourseName" resultType="java.lang.Integer">
		select count(*) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- 通过 courseName 获得该课程的总分（非加权）: public double getCourseTotalScoreByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseTotalScoreByCourseName" resultType="java.lang.Double">
		select sum(sc.score) from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.examTerm =
			CONCAT(#{year}, '-', #{term})
		</where>
	</select>

	<!-- ======大一、大二具有代表性的10门主要基础课程成绩具体分析====== -->

	<!-- 通过 courseName和departmentId 获得该课程该学院的参加考试总人数: public Integer getCourseTotalStudentNumberByCourseNameAndDepartmentId( 
		@Param(value = "courseName") String courseName, @Param(value = "departmentId") 
		Integer departmentId, @Param(value = "year") String year, @Param(value = 
		"term") Integer term); -->
	<select id="getCourseTotalStudentNumberByCourseNameAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.departmentId = #{departmentId}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 courseName和departmentId 获得该课程该学院优秀的学生人数: public Integer getCourseExcellentNumberByCourseNameAndDepartmentId(@Param(value 
		= "courseName") String courseName, @Param(value = "departmentId") Integer 
		departmentId, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getCourseExcellentNumberByCourseNameAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.departmentId = #{departmentId}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >= 90
		</where>
	</select>

	<!-- 通过 courseName和departmentId 获得该课程该学院不及格的学生人数: public Integer getCourseFailNumberByCourseNameAndDepartmentId(@Param(value 
		= "courseName") String courseName, @Param(value = "departmentId") Integer 
		departmentId, @Param(value = "year") String year, @Param(value = "term") 
		Integer term); -->
	<select id="getCourseFailNumberByCourseNameAndDepartmentId"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.departmentId = #{departmentId}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- ==========正态分布统计分析========== -->
	<!-- 通过 courseName 查询课程编号public Integer getCourseNumberByCourseName(@Param(value 
		= "courseName") String courseName); -->
	<select id="getCourseNumberByCourseName" resultType="java.lang.Integer">
		select
		ifnull((select courseNumber from course where courseName =
		#{courseName} limit 1), 0)
	</select>

	<!-- 通过 courseName 查询课程开课单位:public String getCourseDepartmentByCourseName(@Param(value 
		= "courseName") String courseName); -->
	<select id="getCourseDepartmentByCourseName" resultType="java.lang.String">
		select
		ifnull((select courseDepartment from course where courseName =
		#{courseName} limit 1), '没有这个课')
	</select>

	<!-- 通过 courseName 获得该课程的成绩列表:public List<Double> getCourseScoreListByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value= "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseScoreListByCourseName" resultType="java.lang.Double">
		select sc.score from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 courseName 获得该课程10个分数段的学生人数:public Map<String, Integer> getCourseStudentNumberMapByCourseName(@Param(value 
		= "courseName") String courseName, @Param(value = "year") String year, @Param(value 
		= "term") Integer term); -->
	<select id="getCourseStudentNumberMapByCourseName" resultType="java.util.Map">
		select <![CDATA[count(case when sc.score < 10 then scId end) segmentZero]]>,
		<![CDATA[count(case when sc.score >=10 and sc.score < 20 then scId end) segmentOne]]>,
		<![CDATA[count(case when sc.score >=20 and sc.score < 30 then scId end) segmentTwo]]>,
		<![CDATA[count(case when sc.score >=30 and sc.score < 40 then scId end) segmentThree]]>,
		<![CDATA[count(case when sc.score >=40 and sc.score < 50 then scId end) segmentFour]]>,
		<![CDATA[count(case when sc.score >=50 and sc.score < 60 then scId end) segmentFive]]>,
		<![CDATA[count(case when sc.score >=60 and sc.score < 70 then scId end) segmentSix]]>,
		<![CDATA[count(case when sc.score >=70 and sc.score < 80 then scId end) segmentSeven]]>,
		<![CDATA[count(case when sc.score >=80 and sc.score < 90 then scId end) segmentEight]]>,
		<![CDATA[count(case when sc.score >=90 and sc.score <= 100 then scId end) segmentNine]]>
		from course c, studentcourse sc
		<where>
			c.courseId = sc.courseId
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- ======大一，大二具有代表性的10门基础课程各班成绩情况====== -->

	<!-- 通过 courseName和classNumber 获得该课程该班级的参加考试总人数: public Integer getCourseTotalStudentNumberByCourseNameAndClassNumber(@Param(value 
		= "courseName") String courseName, @Param(value = "classNumber") String classNumber, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getCourseTotalStudentNumberByCourseNameAndClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
		</where>
	</select>

	<!-- 通过 courseName和classNumber 获得该课程该班级的优秀学生数: public Integer getCourseExcellentNumberByCourseNameAndClassNumber(@Param(value 
		= "courseName") String courseName, @Param(value = "classNumber") String classNumber, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getCourseExcellentNumberByCourseNameAndClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			and sc.score >=90
		</where>
	</select>

	<!-- 通过 courseName和classNumber 获得该课程该班级的不及格学生数: public Integer getCourseFailNumberByCourseNameAndClassNumber(@Param(value 
		= "courseName") String courseName, @Param(value = "classNumber") String classNumber, 
		@Param(value = "year") String year, @Param(value = "term") Integer term); -->
	<select id="getCourseFailNumberByCourseNameAndClassNumber"
		resultType="java.lang.Integer">
		select count(*) from student s, course c, studentcourse sc
		<where>
			s.studentId = sc.studentId
			and c.courseId = sc.courseId
			and
			s.studentClass = #{classNumber}
			and c.courseName = #{courseName}
			and
			sc.examTerm = CONCAT(#{year}, '-', #{term})
			and sc.examProperty = 1
			and sc.scoreMark = 1
			<![CDATA[and sc.score < 60]]>
		</where>
	</select>

	<!-- =======导入数据库中需要的接口====== -->
	<!-- 通过 examTerm 判断数据库中该学期的个数:public Integer isFileInsertedByExamTerm(@Param(value 
		= "examTerm") String examTerm); -->
	<select id="isFileInsertedByExamTerm" resultType="java.lang.Integer">
		<!-- select ifnull((select 1 from studentcourse <where> examTerm = #{examTerm} 
			</where> limit 1),0) -->
		select ifnull((select 1 from studentcourse where examTerm =
		#{examTerm} limit 1),0)
	</select>

	<sql id="studentCourseProperty">
		(score, scLevel, studentId, courseId, examTerm,
		examProperty, scoreMark)
	</sql>

</mapper>